// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: falanx.proto

package falanxpb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Type int32

const (
	Type_REQUEST_SET Type = 0
	Type_ORDERED_REQ Type = 1
	Type_ORDERED_LOG Type = 2
)

var Type_name = map[int32]string{
	0: "REQUEST_SET",
	1: "ORDERED_REQ",
	2: "ORDERED_LOG",
}

var Type_value = map[string]int32{
	"REQUEST_SET": 0,
	"ORDERED_REQ": 1,
	"ORDERED_LOG": 2,
}

func (x Type) String() string {
	return proto.EnumName(Type_name, int32(x))
}

func (Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_52f9c01338bf5dac, []int{0}
}

type ConsensusMessage struct {
	Type    Type   `protobuf:"varint,1,opt,name=type,proto3,enum=falanxpb.Type" json:"type,omitempty"`
	Payload []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *ConsensusMessage) Reset()         { *m = ConsensusMessage{} }
func (m *ConsensusMessage) String() string { return proto.CompactTextString(m) }
func (*ConsensusMessage) ProtoMessage()    {}
func (*ConsensusMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_52f9c01338bf5dac, []int{0}
}
func (m *ConsensusMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsensusMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsensusMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusMessage.Merge(m, src)
}
func (m *ConsensusMessage) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusMessage proto.InternalMessageInfo

func (m *ConsensusMessage) GetType() Type {
	if m != nil {
		return m.Type
	}
	return Type_REQUEST_SET
}

func (m *ConsensusMessage) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type Transaction struct {
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *Transaction) Reset()         { *m = Transaction{} }
func (m *Transaction) String() string { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()    {}
func (*Transaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_52f9c01338bf5dac, []int{1}
}
func (m *Transaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Transaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Transaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Transaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transaction.Merge(m, src)
}
func (m *Transaction) XXX_Size() int {
	return m.Size()
}
func (m *Transaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Transaction.DiscardUnknown(m)
}

var xxx_messageInfo_Transaction proto.InternalMessageInfo

func (m *Transaction) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type RequestSet struct {
	Requests []*Transaction `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (m *RequestSet) Reset()         { *m = RequestSet{} }
func (m *RequestSet) String() string { return proto.CompactTextString(m) }
func (*RequestSet) ProtoMessage()    {}
func (*RequestSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_52f9c01338bf5dac, []int{2}
}
func (m *RequestSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RequestSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RequestSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RequestSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestSet.Merge(m, src)
}
func (m *RequestSet) XXX_Size() int {
	return m.Size()
}
func (m *RequestSet) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestSet.DiscardUnknown(m)
}

var xxx_messageInfo_RequestSet proto.InternalMessageInfo

func (m *RequestSet) GetRequests() []*Transaction {
	if m != nil {
		return m.Requests
	}
	return nil
}

type OrderedLog struct {
	ReplicaId uint64 `protobuf:"varint,1,opt,name=replica_id,json=replicaId,proto3" json:"replica_id,omitempty"`
	Sequence  uint64 `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	TxHash    string `protobuf:"bytes,3,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	Timestamp int64  `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *OrderedLog) Reset()         { *m = OrderedLog{} }
func (m *OrderedLog) String() string { return proto.CompactTextString(m) }
func (*OrderedLog) ProtoMessage()    {}
func (*OrderedLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_52f9c01338bf5dac, []int{3}
}
func (m *OrderedLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderedLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderedLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderedLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderedLog.Merge(m, src)
}
func (m *OrderedLog) XXX_Size() int {
	return m.Size()
}
func (m *OrderedLog) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderedLog.DiscardUnknown(m)
}

var xxx_messageInfo_OrderedLog proto.InternalMessageInfo

func (m *OrderedLog) GetReplicaId() uint64 {
	if m != nil {
		return m.ReplicaId
	}
	return 0
}

func (m *OrderedLog) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *OrderedLog) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *OrderedLog) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type OrderedReq struct {
	ClientId   uint64   `protobuf:"varint,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	Sequence   uint64   `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	TxHashList []string `protobuf:"bytes,3,rep,name=tx_hash_list,json=txHashList,proto3" json:"tx_hash_list,omitempty"`
	Timestamp  int64    `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *OrderedReq) Reset()         { *m = OrderedReq{} }
func (m *OrderedReq) String() string { return proto.CompactTextString(m) }
func (*OrderedReq) ProtoMessage()    {}
func (*OrderedReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_52f9c01338bf5dac, []int{4}
}
func (m *OrderedReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderedReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderedReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderedReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderedReq.Merge(m, src)
}
func (m *OrderedReq) XXX_Size() int {
	return m.Size()
}
func (m *OrderedReq) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderedReq.DiscardUnknown(m)
}

var xxx_messageInfo_OrderedReq proto.InternalMessageInfo

func (m *OrderedReq) GetClientId() uint64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *OrderedReq) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *OrderedReq) GetTxHashList() []string {
	if m != nil {
		return m.TxHashList
	}
	return nil
}

func (m *OrderedReq) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type Suspect struct {
	ReplicaId uint64 `protobuf:"varint,1,opt,name=replica_id,json=replicaId,proto3" json:"replica_id,omitempty"`
	MaliceId  uint64 `protobuf:"varint,2,opt,name=malice_id,json=maliceId,proto3" json:"malice_id,omitempty"`
}

func (m *Suspect) Reset()         { *m = Suspect{} }
func (m *Suspect) String() string { return proto.CompactTextString(m) }
func (*Suspect) ProtoMessage()    {}
func (*Suspect) Descriptor() ([]byte, []int) {
	return fileDescriptor_52f9c01338bf5dac, []int{5}
}
func (m *Suspect) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Suspect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Suspect.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Suspect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Suspect.Merge(m, src)
}
func (m *Suspect) XXX_Size() int {
	return m.Size()
}
func (m *Suspect) XXX_DiscardUnknown() {
	xxx_messageInfo_Suspect.DiscardUnknown(m)
}

var xxx_messageInfo_Suspect proto.InternalMessageInfo

func (m *Suspect) GetReplicaId() uint64 {
	if m != nil {
		return m.ReplicaId
	}
	return 0
}

func (m *Suspect) GetMaliceId() uint64 {
	if m != nil {
		return m.MaliceId
	}
	return 0
}

type Reply struct {
	ReplicaId uint64 `protobuf:"varint,1,opt,name=replica_id,json=replicaId,proto3" json:"replica_id,omitempty"`
	ClientId  uint64 `protobuf:"varint,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	TxHash    string `protobuf:"bytes,3,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	Result    []byte `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *Reply) Reset()         { *m = Reply{} }
func (m *Reply) String() string { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()    {}
func (*Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_52f9c01338bf5dac, []int{6}
}
func (m *Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reply.Merge(m, src)
}
func (m *Reply) XXX_Size() int {
	return m.Size()
}
func (m *Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_Reply proto.InternalMessageInfo

func (m *Reply) GetReplicaId() uint64 {
	if m != nil {
		return m.ReplicaId
	}
	return 0
}

func (m *Reply) GetClientId() uint64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *Reply) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *Reply) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func init() {
	proto.RegisterEnum("falanxpb.Type", Type_name, Type_value)
	proto.RegisterType((*ConsensusMessage)(nil), "falanxpb.consensus_message")
	proto.RegisterType((*Transaction)(nil), "falanxpb.Transaction")
	proto.RegisterType((*RequestSet)(nil), "falanxpb.request_set")
	proto.RegisterType((*OrderedLog)(nil), "falanxpb.ordered_log")
	proto.RegisterType((*OrderedReq)(nil), "falanxpb.ordered_req")
	proto.RegisterType((*Suspect)(nil), "falanxpb.suspect")
	proto.RegisterType((*Reply)(nil), "falanxpb.reply")
}

func init() { proto.RegisterFile("falanx.proto", fileDescriptor_52f9c01338bf5dac) }

var fileDescriptor_52f9c01338bf5dac = []byte{
	// 433 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x4f, 0x6f, 0xd3, 0x40,
	0x10, 0xc5, 0xb3, 0xb1, 0x49, 0xe2, 0x71, 0x54, 0xc2, 0x4a, 0x80, 0x45, 0xc1, 0xb2, 0x7c, 0xc1,
	0xe2, 0x10, 0x89, 0x72, 0xe2, 0x86, 0x50, 0x2d, 0xa8, 0x54, 0xa9, 0xca, 0x36, 0x9c, 0xad, 0xad,
	0x3d, 0x34, 0x96, 0x1c, 0xdb, 0xdd, 0xd9, 0x48, 0xc9, 0x89, 0x1b, 0x67, 0x3e, 0x16, 0xc7, 0x1e,
	0x39, 0xa2, 0xe4, 0x8b, 0x20, 0xff, 0x69, 0x1d, 0x90, 0x50, 0x7a, 0x7c, 0x6f, 0xdf, 0xee, 0xfb,
	0xed, 0x68, 0x60, 0xfc, 0x55, 0x66, 0x32, 0x5f, 0x4f, 0x4b, 0x55, 0xe8, 0x82, 0x8f, 0x1a, 0x55,
	0x5e, 0xf9, 0x33, 0x78, 0x12, 0x17, 0x39, 0x61, 0x4e, 0x2b, 0x8a, 0x96, 0x48, 0x24, 0xaf, 0x91,
	0xfb, 0x60, 0xea, 0x4d, 0x89, 0x0e, 0xf3, 0x58, 0x70, 0x74, 0x72, 0x34, 0xbd, 0x4b, 0x4f, 0xe7,
	0x9b, 0x12, 0x45, 0x7d, 0xc6, 0x1d, 0x18, 0x96, 0x72, 0x93, 0x15, 0x32, 0x71, 0xfa, 0x1e, 0x0b,
	0xc6, 0xe2, 0x4e, 0xfa, 0xaf, 0xc1, 0x9e, 0x2b, 0x99, 0x93, 0x8c, 0x75, 0x5a, 0xe4, 0xfb, 0x41,
	0xf6, 0x77, 0xf0, 0x03, 0xd8, 0x0a, 0x6f, 0x56, 0x48, 0x3a, 0x22, 0xd4, 0xfc, 0x2d, 0x8c, 0x5a,
	0x49, 0x0e, 0xf3, 0x8c, 0xc0, 0x3e, 0x79, 0xba, 0xd7, 0xdc, 0xbd, 0x28, 0xee, 0x63, 0xfe, 0x37,
	0xb0, 0x0b, 0x95, 0xa0, 0xc2, 0x24, 0xca, 0x8a, 0x6b, 0xfe, 0x0a, 0x40, 0x61, 0x99, 0xa5, 0xb1,
	0x8c, 0xd2, 0xa6, 0xcd, 0x14, 0x56, 0xeb, 0x9c, 0x25, 0xfc, 0x05, 0x8c, 0xa8, 0xba, 0x99, 0xc7,
	0x58, 0x33, 0x9b, 0xe2, 0x5e, 0xf3, 0xe7, 0x30, 0xd4, 0xeb, 0x68, 0x21, 0x69, 0xe1, 0x18, 0x1e,
	0x0b, 0x2c, 0x31, 0xd0, 0xeb, 0xcf, 0x92, 0x16, 0xfc, 0x25, 0x58, 0x3a, 0x5d, 0x22, 0x69, 0xb9,
	0x2c, 0x1d, 0xd3, 0x63, 0x81, 0x21, 0x3a, 0xc3, 0xff, 0xce, 0x3a, 0x02, 0x85, 0x37, 0xfc, 0x18,
	0xac, 0x38, 0x4b, 0x31, 0xd7, 0x1d, 0xc0, 0xa8, 0x31, 0x0e, 0xf4, 0x7b, 0x30, 0x6e, 0xfb, 0xa3,
	0x2c, 0x25, 0xed, 0x18, 0x9e, 0x11, 0x58, 0x02, 0x1a, 0x88, 0xf3, 0x94, 0xf4, 0x01, 0x90, 0x10,
	0x86, 0xb4, 0xa2, 0x12, 0x63, 0x7d, 0x68, 0x0a, 0xc7, 0x60, 0x2d, 0x65, 0x96, 0xc6, 0x58, 0x9d,
	0xb6, 0x18, 0x8d, 0x71, 0x96, 0xf8, 0x1a, 0x1e, 0x55, 0xc9, 0xcd, 0x03, 0x1e, 0xe9, 0xfe, 0xd9,
	0xff, 0xe7, 0x9f, 0xff, 0x9d, 0xe5, 0x33, 0x18, 0x28, 0xa4, 0x55, 0xa6, 0x6b, 0xfe, 0xb1, 0x68,
	0xd5, 0x9b, 0xf7, 0x60, 0x56, 0x9b, 0xc5, 0x1f, 0x83, 0x2d, 0xc2, 0xd9, 0x97, 0xf0, 0x72, 0x1e,
	0x5d, 0x86, 0xf3, 0x49, 0xaf, 0x32, 0x2e, 0xc4, 0x69, 0x28, 0xc2, 0xd3, 0x48, 0x84, 0xb3, 0x09,
	0xdb, 0x37, 0xce, 0x2f, 0x3e, 0x4d, 0xfa, 0x1f, 0x9d, 0x9f, 0x5b, 0x97, 0xdd, 0x6e, 0x5d, 0xf6,
	0x7b, 0xeb, 0xb2, 0x1f, 0x3b, 0xb7, 0x77, 0xbb, 0x73, 0x7b, 0xbf, 0x76, 0x6e, 0xef, 0x6a, 0x50,
	0xaf, 0xfa, 0xbb, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x0b, 0xe8, 0x11, 0xbf, 0xfa, 0x02, 0x00,
	0x00,
}

func (m *ConsensusMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFalanx(dAtA, i, uint64(m.Type))
	}
	if len(m.Payload) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFalanx(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	return i, nil
}

func (m *Transaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Transaction) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Payload) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFalanx(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	return i, nil
}

func (m *RequestSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestSet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Requests) > 0 {
		for _, msg := range m.Requests {
			dAtA[i] = 0xa
			i++
			i = encodeVarintFalanx(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *OrderedLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderedLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReplicaId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFalanx(dAtA, i, uint64(m.ReplicaId))
	}
	if m.Sequence != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFalanx(dAtA, i, uint64(m.Sequence))
	}
	if len(m.TxHash) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFalanx(dAtA, i, uint64(len(m.TxHash)))
		i += copy(dAtA[i:], m.TxHash)
	}
	if m.Timestamp != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintFalanx(dAtA, i, uint64(m.Timestamp))
	}
	return i, nil
}

func (m *OrderedReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderedReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ClientId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFalanx(dAtA, i, uint64(m.ClientId))
	}
	if m.Sequence != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFalanx(dAtA, i, uint64(m.Sequence))
	}
	if len(m.TxHashList) > 0 {
		for _, s := range m.TxHashList {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Timestamp != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintFalanx(dAtA, i, uint64(m.Timestamp))
	}
	return i, nil
}

func (m *Suspect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Suspect) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReplicaId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFalanx(dAtA, i, uint64(m.ReplicaId))
	}
	if m.MaliceId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFalanx(dAtA, i, uint64(m.MaliceId))
	}
	return i, nil
}

func (m *Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Reply) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReplicaId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFalanx(dAtA, i, uint64(m.ReplicaId))
	}
	if m.ClientId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFalanx(dAtA, i, uint64(m.ClientId))
	}
	if len(m.TxHash) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFalanx(dAtA, i, uint64(len(m.TxHash)))
		i += copy(dAtA[i:], m.TxHash)
	}
	if len(m.Result) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintFalanx(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	return i, nil
}

func encodeVarintFalanx(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ConsensusMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovFalanx(uint64(m.Type))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovFalanx(uint64(l))
	}
	return n
}

func (m *Transaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovFalanx(uint64(l))
	}
	return n
}

func (m *RequestSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Requests) > 0 {
		for _, e := range m.Requests {
			l = e.Size()
			n += 1 + l + sovFalanx(uint64(l))
		}
	}
	return n
}

func (m *OrderedLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReplicaId != 0 {
		n += 1 + sovFalanx(uint64(m.ReplicaId))
	}
	if m.Sequence != 0 {
		n += 1 + sovFalanx(uint64(m.Sequence))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovFalanx(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovFalanx(uint64(m.Timestamp))
	}
	return n
}

func (m *OrderedReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClientId != 0 {
		n += 1 + sovFalanx(uint64(m.ClientId))
	}
	if m.Sequence != 0 {
		n += 1 + sovFalanx(uint64(m.Sequence))
	}
	if len(m.TxHashList) > 0 {
		for _, s := range m.TxHashList {
			l = len(s)
			n += 1 + l + sovFalanx(uint64(l))
		}
	}
	if m.Timestamp != 0 {
		n += 1 + sovFalanx(uint64(m.Timestamp))
	}
	return n
}

func (m *Suspect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReplicaId != 0 {
		n += 1 + sovFalanx(uint64(m.ReplicaId))
	}
	if m.MaliceId != 0 {
		n += 1 + sovFalanx(uint64(m.MaliceId))
	}
	return n
}

func (m *Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ReplicaId != 0 {
		n += 1 + sovFalanx(uint64(m.ReplicaId))
	}
	if m.ClientId != 0 {
		n += 1 + sovFalanx(uint64(m.ClientId))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovFalanx(uint64(l))
	}
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovFalanx(uint64(l))
	}
	return n
}

func sovFalanx(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozFalanx(x uint64) (n int) {
	return sovFalanx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ConsensusMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFalanx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: consensus_message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: consensus_message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFalanx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFalanx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFalanx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFalanx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFalanx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFalanx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFalanx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Transaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFalanx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Transaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Transaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFalanx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFalanx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFalanx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFalanx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFalanx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFalanx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFalanx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: request_set: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: request_set: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFalanx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFalanx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFalanx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requests = append(m.Requests, &Transaction{})
			if err := m.Requests[len(m.Requests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFalanx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFalanx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFalanx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderedLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFalanx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ordered_log: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ordered_log: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaId", wireType)
			}
			m.ReplicaId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFalanx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicaId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFalanx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFalanx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFalanx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFalanx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFalanx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFalanx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFalanx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFalanx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderedReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFalanx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ordered_req: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ordered_req: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			m.ClientId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFalanx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFalanx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHashList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFalanx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFalanx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFalanx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHashList = append(m.TxHashList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFalanx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFalanx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFalanx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFalanx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Suspect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFalanx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: suspect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: suspect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaId", wireType)
			}
			m.ReplicaId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFalanx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicaId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaliceId", wireType)
			}
			m.MaliceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFalanx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaliceId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFalanx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFalanx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFalanx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFalanx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaId", wireType)
			}
			m.ReplicaId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFalanx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicaId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientId", wireType)
			}
			m.ClientId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFalanx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFalanx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFalanx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFalanx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFalanx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFalanx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFalanx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFalanx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFalanx
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFalanx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFalanx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFalanx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFalanx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFalanx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFalanx
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthFalanx
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFalanx
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFalanx(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthFalanx
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFalanx = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFalanx   = fmt.Errorf("proto: integer overflow")
)
